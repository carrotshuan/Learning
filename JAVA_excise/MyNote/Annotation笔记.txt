注解是代码的特殊标记，这些标记可以在编译、类加载、运行时被读取，并执行相应的处理。
通过注解，程序开发人员可以在不改变原有逻辑的情况下，在源文件中嵌入一些补充信息，注解可以用来为程序元素（类、成员变量、成员方法等）设置元数据。
注解不影响程序代码的执行，无论增加删除注解，代码都能始终如一运行。如果希望其有作用，需要通过某些配套工具对注解中的信息进行访问处理，访问处理注解的工具统称为APT（Annatation Processing Tool）。
注解必须使用工具来处理，工具负责提取注解中包含的元数据，并为元数据增加额外的功能。
JAVA提供了5个基本注解：
1. @Override，在子类中使用，限定一个成员方法必须重写父类同名方法。
2. @Deprecated，JAVA 9新增，表示某个程序元素已过时，并提供两个属性：forRemovable(将来是否被删除),since(从哪个版本开始过时)。@Deprecated(since="",forRemovable="")
3. @SupressWarning，关闭程序元素及子元素的编译告警。
4. @SafeVarargs，抑制堆污染告警。
5. @FunctionalInterface，为Lambda表达式定义的函数式接口，内部只能包含一个抽象函数（可以包含其他default和静态函数）。